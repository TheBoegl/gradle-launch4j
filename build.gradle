buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    }
}

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'maven-publish'

// Write the plugin's classpath to a file to share with the tests.
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile gradleTestKit()
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

    // Add the classpath file to the test runtime classpath.
    testRuntime files(createClasspathManifest)
}

configurations.all {
    resolutionStrategy {
        force 'org.codehaus.groovy:groovy-all:2.4.4'
    }
}

group "edu.sc.seis.gradle"
// use semantic versioning (http://semver.org/)
version "1.5.1"

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}
task groovydocJar (type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}
groovydocJar.dependsOn 'groovydoc'

artifacts {
    archives jar
    archives groovydocJar
    archives sourceJar
}

pluginBundle {
    website = 'https://github.com/TheBoegl/gradle-launch4j'
    vcsUrl = 'https://github.com/TheBoegl/gradle-launch4j'
    description = 'A gradle-plugin to create windows executables with launch4j for Java application.'
    plugins {
        launch4j {
            id = 'edu.sc.seis.launch4j'
            displayName = 'launch4j gradle plugin'
            tags = ['launch4j', 'executable', 'wrapper']
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "${project.name}"
                    description 'A plugin for Gradle that uses launch4j to create windows .exe file for java applications. '
                    url "https://github.com/TheBoegl/gradle-launch4j/"
                    scm {
                        url 'https://github.com/TheBoegl/gradle-launch4j/'
                        connection 'scm:git:git://github.com/TheBoegl/gradle-launch4j.git'
                        developerConnection 'scm:git:git@github.com:TheBoegl/gradle-launch4j.git'
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'crotwell'
                            name 'Philip Crotwell'
                            email 'crotwell@seis.sc.edu'
                            roles {
                                role 'Previous lead developer'
                            }
                        }
                        developer {
                            id 'theboegl'
                            name 'Sebastian BÃ¶gl'
                            email 'info@sebastianboegl.de'
                            roles {
                                role 'Lead developer'
                            }
                        }
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/TheBoegl/gradle-launch4j/issues'
                    }
                }
            }


            artifact sourceJar {
                classifier "sources"
            }
            artifact groovydocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            url "file:../mavenRepo/"
        }
    }
}

publishPlugins.dependsOn build

signing {
    if (System.console()) {
        sign configurations.archives
    }
}

import org.gradle.plugins.signing.Sign

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

//createReleaseTag.dependsOn publish
